<?xml version="1.0"?>
<!--

-->
<scxml xmlns="http://www.w3.org/2005/07/scxml"
       version="1.0"
       datamodel="jexl"
       initial="filling">

    <!-- 请假单需要的数据-->
    <datamodel>
        <data id="applicant" expr=""></data>
        <data id="reason" expr=""></data>
        <data id="from" expr=""></data>
        <data id="to" expr=""></data>
        <data id="departmentApprove" expr="false"></data>
        <data id="personnelApprove" expr="false"></data>
    </datamodel>

    <state id="filling">
        <onentry>

        </onentry>
        <!--当填写完了表单，将外界的数据通过,系统变量_event.data传进来，data其实是一个map-->
        <transition event="fill.end" target="approving">
            <assign location="applicant" expr="_event.data.name"></assign>
            <assign location="reason" expr="_event.data.reason"></assign>
            <assign location="from" expr="_event.data.from"></assign>
            <assign location="to" expr="_event.data.to"></assign>
            <!--调用leaveEntity的填表函数，在这个函数里面，我们可以操作做数据持久化-->
            <!--个人觉得这种方式和领域驱动设计很像，欢迎和我交流-->
            <script>
                leaveEntity.fillForm(applicant,reason,from,to)
            </script>

        </transition>
    </state>

    <!--这是一个复合状态：一个大状太-->
    <state id="approving">
        <initial>
            <transition target="departmentApproving">

            </transition>
        </initial>
        <!--部门经理审批状态-->
        <state id="departmentApproving">
            <onentry></onentry>
            <!--如果部门经理同意，就将departmentApprove的值赋值为true，然后我们可以执行持久化的数据操作（我这里只是简单的输出）-->
            <transition event="approve" target="personnelApproving">
                <assign location="departmentApprove" expr="true"></assign>
                <script>
                    leaveEntity.departmentApprove(departmentApprove)
                </script>
            </transition>
        </state>
        <!--人事经理审批状态-->
        <state id="personnelApproving">
            <!--如果人事经理同意，就将personnelApprove的值赋值为true，然后我们可以执行持久化的数据操作（我这里只是简单的输出）-->
            <transition event="approve" target="approveEnd">
                <assign location="personnelApprove" expr="true"></assign>
                <script>
                    leaveEntity.personnelApprove(personnelApprove)
                </script>
            </transition>
        </state>

        <final id="approveEnd"></final>

        <!--这个转移的事件“event.state.approving”是当当前复合状态到达 <final> 节点的时候框架自动生成的。-->
        <transition event="done.state.approving" target="approved" />
        <!--这个转移事件，是只要任何一个经理拒绝了请求，就转向被拒绝状态-->
        <transition event="reject" target="rejected">

        </transition>
    </state>
    <!--已同意状态，进入状态的时候，可以发送邮件给相应的用户-->
    <state id="approved">
        <onentry>
            <script>
                leaveEntity.sendEmail()
            </script>
        </onentry>
        <!--一个eventless（自动转移），执行完了<onentry>里面的事件就转移了-->
        <transition target="archiving" ></transition>
    </state>
    <!--被拒绝状态，进入状态的时候，可以发送邮件给相应的用户-->
    <state id="rejected">
        <onentry>
            <script>
                leaveEntity.reject(true);
                leaveEntity.sendEmail();
            </script>
        </onentry>
        <!--申请者选择继续修改申请信息的时候的转移，-->
        <transition event="goFilling" target="filling"></transition>
        <!--申请者可以取消本次请假-->
        <transition event="goEnd" target="archiving"></transition>
    </state>
    <!--归档状态，进入的时候直接归档-->
    <state id="archiving">
        <onentry>
            <script>
                leaveEntity.archive()
            </script>
        </onentry>
        <transition target="end"/>
    </state>

    <!--结束状态-->
    <final id="end">
    </final>

</scxml>